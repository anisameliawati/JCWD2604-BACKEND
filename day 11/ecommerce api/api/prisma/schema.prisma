// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
male
female
}
enum Role {
user
admin
}
enum Status {
Waiting_for_Payment     @map("Waiting for Payment")
Waiting_for_Admin_Approval @map("Waiting for Admin Approval")
Transaction_Completed   @map("Transaction Completed")
Canceled @map("Canceled")
}

enum StockStatus { 
  Available
  Booked
  Lost
}

model User{
  id Int @id @default(autoincrement())
  email String @unique
  password String
  first_name String
  last_name String
  role Role? @default(user)
  isVerified Boolean @default(false)
  gender Gender?
  avatar_url String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  products Product[]
  categories Category[]
  carts Cart[]
  transactions Transaction[]
  addresses Address[]
}

model Address {
  id Int @id @default(autoincrement())
  userId Int
  user   User  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  address String
  province   Province  @relation(fields: [provinceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  provinceId Int
  city   City  @relation(fields: [cityId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cityId Int
  postal_code Int
  transactions Transaction[]
}

model Product {
  id Int @id @default(autoincrement())
  product_name String
  image_url String? @db.VarChar(255)
  price Decimal @db.Decimal(18,2)
  description String @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId Int
  user   User  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  carts Cart[]
  stock Stock[]
  transactionDetails TransactionDetail[]
  product_category Product_Category[]
}

model Stock {
  id Int @id @default(autoincrement())
  productId Int
  stock_qty Decimal @db.Decimal(18,2)
  status StockStatus? @default(Available)
  reference String?
  product  Product  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Transaction {
  id Int @id @default(autoincrement())
  no_invoice String
  address_id Int
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user   User  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  address   Address  @relation(fields: [address_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transactionDetails TransactionDetail[]
}
model TransactionDetail {
  productId Int
  transactionId Int
  qty Decimal @db.Decimal(18,2)
  price Decimal @db.Decimal(18,2)
  transaction   Transaction  @relation(fields: [transactionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product   Product  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  @@id([productId,transactionId])
}

model Category {
  id Int @id @default(autoincrement())
  category_name String
  userId Int
  user   User  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product_category Product_Category[]
}

model Product_Category {
  productId Int
  categoryId Int
  product  Product  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  category  Category  @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  @@id([productId,categoryId])
}

model Cart {
  userId Int
  productId Int
  qty Decimal
  user User  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product  Product  @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  @@id([userId,productId])
}

model Province {
  id Int @id
  name String
  address Address[]
  cities City[]
}

model City {
  id Int @id
  name String
  ProvinceId Int
  province   Province  @relation(fields: [ProvinceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  address Address[]
}